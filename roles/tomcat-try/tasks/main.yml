---
- name: Install Java 1.8
  yum: name=java-1.8.0-openjdk state=present

- name: Install unzip
  yum: name=unzip state=present

- name: Add tomcat group
  group: name=tomcat

- name: Add tomcat user
  user: name=tomcat group=tomcat home=/home/tomcat createhome=yes

- name: Create stage directory
  file:
    path: "{{stage_folder}}"
    state: directory
    mode: 0755

- name: Create Tomcat install Base directory
  file:
    path: "{{catalina_install_base}}"
    state: directory
    mode: 0755

# - name : Download latest version of Apache Tomcat8
#   get_url:
#     url: "{{catalina_download_url}}"
#     dest: "{{stage_folder}}"
#     mode: 0440
#

# - name: Copy and unarchive the Apache Tomcat
#   unarchive:
#     src: "/opt/stage-temp/apache-tomcat-8.5.37.zip"
# #    copy: yes
#     # creates: "{{catalina_install_base}}"
#     dest: "{{catalina_base}}"
#     remote_src: yes

- name: stat of zip files
  stat: path="{{catalina_base}}/tomcat/apache-tomcat-*"
  register: folder_stat
- debug: var=folder_stat

- name: Rename tomcat Binary Home
  command: mv "{{catalina_base}}/tomcat/apache-tomcat-*" "{{catalina_home}}"
  when: folder_stat.stat.exists


- name: Create tomcat8 instances directory
  file:
    path: "{{catalina_base}}/instances"
    state: directory
    mode: 0755
  with_dict: "{{ nodes }}"

- name: Create the required no. of node directories (tomcat instance root)
  file:
    path: "{{catalina_base}}/instances/{{ item.value.name }}"
    state: directory
    mode: 0755
  with_dict: "{{ nodes }}"

- name: Create tomcat instance sub directory - bin
  file:
    path: "{{catalina_base}}/instances/{{ item.value.name }}/bin"
    state: directory
    mode: 0755
  with_dict: "{{ nodes }}"
#
# - name: Copy tomcat-juli.jar to bin
# #  copy: src=bin/tomcat-juli.jar dest="/home/tomcat/te/tomcat8/instances/{{ item.value.name }}/bin" mode=0755 remote_src=yes
#   copy: src="{{catalina_home}}/bin/tomcat-juli.jar" dest="{{catalina_base}}/instances/{{ item.value.name }}/bin" mode=0755 remote_src=yes
#   with_dict: "{{ nodes }}"
#
#
# - name: Copy startup.sh script to bin
#   template: src=startup.j2 dest="{{catalina_base}}/instances/{{ item.value.name }}/bin/startup.sh" mode=0755
#   with_dict: "{{ nodes }}"
#
# - name: Copy shutdown.sh script to bin
#   template: src=shutdown.j2 dest="{{catalina_base}}/instances/{{ item.value.name }}/bin/shutdown.sh" mode=0755
#   with_dict: "{{ nodes }}"
#
- name: Create tomcat instance sub directory - lib
  file:
    path: "{{catalina_base}}/instances/{{ item.value.name }}/lib"
    state: directory
    mode: 0755
  with_dict: "{{ nodes }}"

- name: Create tomcat instance sub directory - logs
  file:
    path: "{{catalina_base}}/instances/{{ item.value.name }}/logs"
    state: directory
    mode: 0755
  with_dict: "{{ nodes }}"

- name: Create tomcat instance sub directory - temp
  file:
    path: "{{catalina_base}}/instances/{{ item.value.name }}/temp"
    state: directory
    mode: 0755
  with_dict: "{{ nodes }}"

- name: Create tomcat instance sub directory - webapps
  file:
    path: "{{catalina_base}}/instances/{{ item.value.name }}/webapps"
    state: directory
    mode: 0755
  with_dict: "{{ nodes }}"
#
# - name: Copy all WARs to webapps
#   copy: src=webapps/ dest="{{catalina_base}}/instances/{{ item.value.name }}/webapps" mode=0755
#   with_dict: "{{ nodes }}"
#   notify: restart tomcat
#
- name: Create tomcat instance sub directory - conf
  file:
    path: "{{catalina_base}}/instances/{{ item.value.name }}/conf"
    state: directory
    mode: 0755
  with_dict: "{{ nodes }}"
#
# - name: Copy all config files to conf
#   copy: src=conf/ dest="{{catalina_base}}/instances/{{ item.value.name }}/conf"
#   with_dict: "{{ nodes }}"
#
- name: Create tomcat instance sub directory - conf/Catalina/host_name
  file:
    path: "{{catalina_base}}/instances/{{ item.value.name }}/conf/Catalina/{{ inventory_hostname }}"
    state: directory
  with_dict: "{{ nodes }}"
#
# - name: Copy manager.xml (Context) to conf/Catalina/host_name
#   copy: src=Catalina/manager.xml dest="{{catalina_base}}/instances/{{ item.value.name }}/conf/Catalina/{{ inventory_hostname }}"
#   with_dict: "{{ nodes }}"
#
# - name: Copy tomcat-users.xml script to conf
#   template: src=tomcat-users.j2 dest="{{catalina_base}}/instances/{{ item.value.name }}/conf/tomcat-users.xml" mode=0755
#   with_dict: "{{ nodes }}"
#
# - name: Copy server.xml script to conf
#   template: src=server.j2 dest="{{catalina_base}}/instances/{{ item.value.name }}/conf/server.xml" mode=0755
#   with_dict: "{{ nodes }}"
#   notify: restart tomcat
#
- name: Change owner [tomcat:tomcat] and permissions [0755] of Tomcat Home
  file:
    path: "{{catalina_install_base}}"
    mode: 0755
    state: directory
    recurse: yes
    owner: tomcat
    group: tomcat

# - name: Insert firewalld rule for tomcat http port (RHEL/CentOS 7.x)
#   firewalld: port={{ item.value.http_port }}/tcp permanent=true state=enabled immediate=yes
#   when: "ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'"
#   with_dict: "{{ nodes }}"
#
# - name: Insert firewalld rule for tomcat ajp port (RHEL/CentOS 7.x)
#   firewalld: port={{ item.value.ajp_port }}/tcp permanent=true state=enabled immediate=yes
#   when: "ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'"
#   with_dict: "{{ nodes }}"
#
# - name: Print the mod cluster advertisement port no.
#   debug:
#     msg: "mod_cluster UDP advertisement port: {{ apache_adv_port }}"
#
# - name: Insert firewalld rule for listening to proxy server adv. (RHEL/CentOS 7.x)
#   firewalld: port={{ apache_adv_port }}/udp permanent=true state=enabled immediate=yes
#   when: "ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'"
